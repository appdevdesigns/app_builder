/**
 * Controller generated by App Builder
 */

steal(
	// List your Controller's dependencies here:
	'opstools/BuildApp/controllers/utils/DataCollectionHelper.js',
	'opstools/BuildApp/controllers/utils/DataHelper.js',
	'opstools/BuildApp/controllers/utils/ModelCreator.js',
	'opstools/BuildApp/controllers/page_components/componentManager.js',
	function(dataCollectionHelper, dataHelper, modelCreator, componentManager) {
		System.import('appdev').then(function () {
			System.import('opstools/BuildApp').then(function () {
				steal.import('appdev/ad',
					'appdev/control/control',
					'opstools/BuildApp/models/ABApplication'

<% for(var i = 0; i < models.length; i++) {%>                    ,'opstools/<%= appName %>/models/<%= appName %>_<%= models[i] %>'
<% } %>

					).then(function() {
						// Namespacing conventions:
						// AD.Control.extend('[application].[controller]', [{ static },] {instance} );
						AD.Control.extend('opstools.<%- appName %>.<%- pageName %>', {

							init: function(element, options) {
								var self = this;
								options = AD.defaults({
									resize_notification: 'opstools.<%- appName %>.<%- pageName %>.resize'
								}, options);
								this.options = options;

								// Call parent init
								this._super(element, options);

								this.data = {};
								this.dataSource = this.options.dataSource;
								this.rootPageID = this.activePageID = <%- rootPageID %>;
								this.application;
								this.pages = <%- JSON.stringify(pages) %>;
								
								for (var id in this.pages) {
									this.pages[id].domID = '<%- domID() %>' + id;
								}

								this.initModels();

								async.series([
									// Get application model
									function(next) {
										self.Model.ABApplication.findOne({ id: <%- appId %> })
											.fail(next)
											.then(function(result) {
												if (result.translate) result.translate();
												self.application = result;
												next();
											});
									},
									// Get objects
									function(next) {
										self.application.getObjects()
											.fail(next)
											.then(function(result) {
												result.forEach(function(r) {
													if (r.translate) r.translate();
												});

												self.application.attr('objects', result);
												next();
											});
									},
									// Get pages
									function(next) {
										self.application.getPages()
											.fail(next)
											.then(function(result) {
												result.forEach(function(r) {
													if (r.translate) r.translate();
												});

												self.application.attr('pages', result);
												next();
											});
									},
									// Initial UI
									function(next){
										webix.ready(function() {
											self.initDOM();
											self.showPage();
										});
										next();
									}
								]);

								/*
								AD.comm.hub.subscribe(this.options.resize_notification, function(message, data) {
									console.log(message, data);
									self.resize();
								});
								*/
								
								AD.comm.hub.subscribe('opsportal.tool.show', function(message, data) {
									self.resize(self.height);
								});

								AD.comm.hub.subscribe('opsportal.resize', function(message, data) {
									self.height = data.height;
									self.resize(data.height);
								});
							},

							initModels: function() {
								this.Model = {};
								this.Model.ABApplication = AD.Model.get('opstools.BuildApp.ABApplication');

<% for(var i = 0; i < models.length; i++) {%>                                this.Model.<%= appName %>_<%= models[i] %> = AD.Model.get('opstools.<%= appName %>.<%= appName %>_<%= models[i] %>');
<% } %>
							},

							initDOM: function () {
								var self = this,
									html = '',
									pageTemplates = [];

								for (var id in this.pages) {
									var page = this.pages[id];

									var comTemplate = '';

									page.components.sort(function (a, b) { return a.weight - b.weight });
									page.components.forEach(function (item) {
										comTemplate += '<div id="' + self.getComponentId(page.domID, item.id) + '"></div>';
										comTemplate += '<div style="height: 30px;"></div>';
									});

									switch(page.type) {
										case 'modal':
											var pageData = self.application.pages.filter(function(p) { return p.id == id; });
											if (pageData && pageData[0]) pageData = pageData[0];

											webix.ui({
												view: "window",
												id: page.domID,
												modal: true,
												position: "center",
												resize: true,
												width: 700,
												height: 450,
												css: 'ab-main-container',
												head:{
													view: "toolbar",
													cols:[
														{ view:"label", label: pageData.label },
														{ view:"button", label: "Close", width: 100, align: "right",
															click: function() {
																if (self.pages[self.previousPageID].type === 'modal')
																	self.showPage();
																else
																	self.showPage(self.previousPageID);
															}
														}
													]
												},
												body:{
													scroll: true,
													template: comTemplate
												}
											}).hide();
											break;
										case 'tab':
											// TODO : tab view
											break;
										case 'page':
										default:
											pageTemplates.push({
												view: "template",
												id: page.domID,
												template: comTemplate,
												minWidth: 700,
												autoheight: true,
												scroll: true
											});
											break;
									}
								}

								// Clear UI content
								if ($$("<%- domID() %>"))
									webix.ui({}, $$("<%- domID() %>"));

								webix.ui({
									view: "multiview",
									container: this.element.attr('id'),
									css: "ab-main-container ab-generated-page",
									id: "<%- domID() %>",
									cells: pageTemplates,
									on: {
										onViewChange: function(prevId, nextId) {
											self.resize();
										}
									}
								});

							},


							initWebix: function (pageId) {
								var self = this,
									app,
									page = self.pages[pageId],
									rows = [];

									page.components.forEach(function (item) {
										self.renderComponent(page, item);
									});

							},

							renderComponent: function (page, item) {
								var self = this,
									q = $.Deferred(),
									componentInstance = componentManager.getComponent(item.component),
									view = componentInstance.getView(),
									viewId = self.getComponentId(page.domID, item.id),
									setting = item.setting,
									dataCollection,
									linkedDataCollection;

								if (!page.comInstances) page.comInstances = {};

								if (page.comInstances[item.id]) {
									if (page.comInstances[item.id].onDisplay)
										page.comInstances[item.id].onDisplay();

									return;
								}

								// Create component instance
								page.comInstances[item.id] = new componentInstance(
									self.application, // Current application
									viewId, // the view id
									item.id // the component data id
								);

								// Listen component events
								$(page.comInstances[item.id]).on('renderComplete', function(event, data) {
									$$("<%- domID() %>").adjust();
									$$(viewId).adjust();
								});

								$(page.comInstances[item.id]).on('changePage', function(event, data) {
									// Redirect to another page
									if (data.previousPage)
										self.showPage(self.previousPageID);
									else if (self.activePageID != data.pageId && data.pageId)
										self.showPage(data.pageId);
								});

								if (view && setting) {
									var setting = setting.attr ? setting.attr() : setting,
										editable = false,
										showAll = false;

									view = $.extend(true, {}, view);
									view.id = viewId;
									view.container = view.id;
									view.autowidth = true;

									$('#' + view.id).html('');

									webix.ui(view);

									async.series([
										// Get data collection
										function (next) {
											if (setting.object) {
												dataCollectionHelper.getDataCollection(self.application, setting.object)
													.fail(next)
													.then(function (result) {
														dataCollection = result;
														next();
													});
											}
											else
												next();
										},
										// Get data collection of connected data
										function (next) {
											if (setting.linkedTo) {
												dataCollectionHelper.getDataCollection(self.application, setting.linkedTo)
													.fail(next)
													.then(function (result) {
														linkedDataCollection = result;
														next();
													});
											}
											else
												next();
										},
										// Render component
										function (next) {
											page.comInstances[item.id].render(item.setting, editable, showAll, dataCollection, linkedDataCollection)
												.fail(next)
												.then(function () {
													next();
												});

										},
										// Update state on load
										function (next) {
											if (page.comInstances[item.id].onDisplay)
												page.comInstances[item.id].onDisplay();

											next();
										}
									], function (err) {
										if (err)
											q.reject(err);
										else
											q.resolve();
									});
								}
								else {
									q.resolve();
								}

								return q;
							},

							resize: function (height) {
								if (!$$("<%- domID() %>") || !$(this.element).is(":visible")) return;

								var width = this.element.width();

								if (!width) {
									this.element.parents().each(function(index, elm) {
										if ($(elm).width() > width)
											width = $(elm).width();
									});
								}

								if (width > 0)
									$$("<%- domID() %>").define('width', width);

								if (height > 0)
									$$("<%- domID() %>").define('height', height);

								$$("<%- domID() %>").adjust();

								if (this.activePageID && this.pages[this.activePageID] && this.pages[this.activePageID].comInstances) {
									for (var key in this.pages[this.activePageID].comInstances) {
										if (this.pages[this.activePageID].comInstances[key].resize)
											this.pages[this.activePageID].comInstances[key].resize(width, height);
									}
								}

							},
							
							
							/**
							* @param integer pageID
							*      Optional page ID number. Default is to show
							*      the root page.
							*/
							showPage: function (pageID) {
								if (typeof pageID == 'undefined') {
									pageID = this.rootPageID;
								}

								// Hide page popup
								if ($$(this.pages[this.activePageID].domID).hide)
									$$(this.pages[this.activePageID].domID).hide();

								$$(this.pages[pageID].domID).show();
								this.previousPageID = this.activePageID;
								this.activePageID = pageID;

								this.initWebix(this.activePageID);

								this.resize();

							},
							
							
							getComponentId: function(pageId, itemId) {
								return pageId + '-component-' + itemId;
							}

						});

					});
			  });
		});
	});