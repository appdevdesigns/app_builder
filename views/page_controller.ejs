/**
 * Controller generated by App Builder
 */

steal(
    // List your Controller's dependencies here:
    
    function() {
        System.import('appdev').then(function() {
            steal.import('appdev/ad',
                'appdev/control/control').then(function() {
                    // Namespacing conventions:
                    // AD.Control.extend('[application].[controller]', [{ static },] {instance} );
                    AD.Control.extend('opstools.<%- appName %>.<%- pageName %>', {

                        init: function(element, options) {
                            var self = this;
                            options = AD.defaults({
                            }, options);
                            this.options = options;

                            // Call parent init
                            this._super(element, options);

                            this.dataSource = this.options.dataSource;
                            this.rootPageID = <%- rootPageID %>;
                            this.pages = <%- JSON.stringify(pages) %>;
                            
                            for (var id in this.pages) {
                                this.pages[id].domID = '<%- domID() %>' + id;
                            }
                            
                            this.initDOM();
                            webix.ready(function() {
                                self.initWebix();
                            });
                        },



                        initDOM: function() {
                            var html = '';
                            for (var id in this.pages) {
                                html += '<div class="abpage" id="' + this.pages[id].domID + '"></div>';
                            }
                            this.element.html(html);
                            
                            this.showPage();
                        },
                        
                        
                        initWebix: function() {
                            var self = this;
                            for (var id in this.pages) {
                                var page = this.pages[id];
                                var rows = [];
                                
                                page.components.forEach(function(item) {
                                    switch (item.component.toLowerCase()) {
                                        case 'menu':
                                            rows.push({
                                                view: 'menu',
                                                data: item.setting.data,
                                                click: function(id, ev) {
                                                    self.showPage(id);
                                                }
                                            });
                                            break;
                                        
                                        case 'grid':
                                            var gridID = 'abcomponent_' + item.id;
                                            var model = AD.models.opstools.AB_Protoss[item.modelName];
                                            rows.push({
                                                view: 'datatable',
                                                columns: item.columns,
                                                id: gridID,
                                                minHeight: 500,
                                                on: {
                                                    onStructureLoad: function() {
                                                        var grid = this;
                                                        model.findAll()
                                                        .then(function(list) {
                                                            
                                                            list.forEach(function(l) {
                                                                l.translate && l.translate();
                                                            });
                                                            var data = AD.op.WebixDataCollection(list);
                                                            grid.sync(data);
                                                            
                                                            /*
                                                            // findAll() produces a Map
                                                            // Convert to plain array
                                                            var arr = [];
                                                            for (var i=0; i<list.length; i++) {
                                                                var row = list[i];
                                                                row.translate && row.translate();
                                                                arr[i] = row;
                                                            }
                                                            grid.parse(arr);
                                                            */
                                                        });
                                                        
                                                    }
                                                }
                                            });
                                            break;
                                            
                                        case 'form':
                                            break;
                                    }
                                });
                                
                                page.webix = webix.ui({
                                    container: page.domID,
                                    view: 'layout',
                                    rows: rows,
                                    minWidth: 300
                                });
                                
                            };
                            
                        },
                        
                        
                        /**
                         * @param integer pageID
                         *      Optional page ID number. Default is to show
                         *      the root page.
                         */
                        showPage: function(pageID) {
                            if (typeof pageID == 'undefined') {
                                pageID = this.rootPageID;
                            }
                            this.element.find('.abpage').hide();
                            this.element.find('#' + this.pages[pageID].domID).show();
                            console.log('show page ' + pageID);
                        },
                        
                        
                        /**
                         * Returns a basic object containing the names of all
                         * the pages from this controller, indexed by their
                         * page ID number.
                         */
                        getPages: function() {
                            var result = {};
                            for (var id in this.pages) {
                                result[id] = pages[id].name;
                            }
                        }

                    });

                });
        });

    });