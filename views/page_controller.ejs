/**
 * Controller generated by App Builder
 */

steal(
    // List your Controller's dependencies here:
    
    function() {
        System.import('appdev').then(function () {
            System.import('opstools/BuildApp').then(function () {
                steal.import('appdev/ad',
                    'appdev/control/control',

                    'opstools/BuildApp/controllers/page_components/Menu',
                    'opstools/BuildApp/controllers/page_components/Grid',
                    'opstools/BuildApp/controllers/page_components/Form'
                    ).then(function() {
                        // Namespacing conventions:
                        // AD.Control.extend('[application].[controller]', [{ static },] {instance} );
                        AD.Control.extend('opstools.<%- appName %>.<%- pageName %>', {

                            init: function(element, options) {
                                var self = this;
                                options = AD.defaults({
                                    resize_notification: 'opstools.<%- appName %>.<%- pageName %>.resize'
                                }, options);
                                this.options = options;

                                // Call parent init
                                this._super(element, options);

                                this.dataSource = this.options.dataSource;
                                this.rootPageID = this.activePageID = <%- rootPageID %>;
                                this.pages = <%- JSON.stringify(pages) %>;
                                
                                for (var id in this.pages) {
                                    this.pages[id].domID = '<%- domID() %>' + id;
                                }

                                this.initControllers();
                                this.initComponents();

                                webix.ready(function() {
                                    self.initDOM();
                                    self.showPage();
                                });

                                /*
                                AD.comm.hub.subscribe(this.options.resize_notification, function(message, data) {
                                    console.log(message, data);
                                    self.resize();
                                });
                                */
                                
                                AD.comm.hub.subscribe('opsportal.resize', function(message, data) {
                                    self.resize(data.height);
                                });
                            },



                            initControllers: function() {
                                this.controllers = {};

                                var Menu = AD.Control.get('opstools.BuildApp.Components.Menu'),
                                    Grid = AD.Control.get('opstools.BuildApp.Components.Grid'),
                                    Form = AD.Control.get('opstools.BuildApp.Components.Form');

                                this.controllers.Menu = new Menu(self.element, {});
                                this.controllers.Grid = new Grid(self.element, {});
                                this.controllers.Form = new Form(self.element, {});
                            },


                            initComponents: function () {
                                var self = this;
                                self.components = {};

                                self.components.Menu = self.controllers.Menu.getInstance();
                                self.components.Grid = self.controllers.Grid.getInstance();
                                self.components.Form = self.controllers.Form.getInstance();
                            },


                            initEvents: function (pageId) {
                                var self = this,
                                    page = self.pages[pageId];

                                    page.components.forEach(function (com) {
                                        var viewId = self.getComponentId(page.domID, com.id);

                                        if (self.components[com.component].registerRenderCompleteEvent) {
                                            self.components[com.component].registerRenderCompleteEvent(function() {
                                                $$("<%- domID() %>").adjust();
                                            });
                                        }

                                        if (com.component === 'Grid') {
                                            if (com.setting.object && com.setting.editPage && com.setting.editForm) {
                                                self.components.Grid.registerEditEvent(viewId, function (selectedData) {
                                                    // Go to edit page
                                                    if (com.setting.editPage != self.activePageID)
                                                        self.showPage(com.setting.editPage);

                                                    // Populate data to edit form
                                                    var formViewId = self.getComponentId('abpage-AB_test-test-' + com.setting.editPage, com.setting.editForm);
                                                    self.components.Form.populateData(formViewId, com.setting.object, selectedData.row);

                                                    // Register form's save event
                                                    self.components.Form.registerSaveEvent(formViewId, function () {
                                                        self.showPage(com.page);

                                                        // Refresh grids
                                                        self.renderComponent(self.pages[com.page], com); // Refresh grids
                                                    });


                                                    // Register form's cancel event
                                                    self.components.Form.registerCancelEvent(formViewId, function () {
                                                        self.showPage(com.page);
                                                    });
                                                });
                                            }
                                        }
                                    });

                            },


                            initDOM: function () {
                                var self = this,
                                    html = '',
                                    pageTemplates = [];

                                for (var id in this.pages) {
                                    var page = this.pages[id];

                                    var comTemplate = '';

                                    page.components.sort(function (a, b) { return a.weight - b.weight });
                                    page.components.forEach(function (item) {
                                        comTemplate += '<div id="' + self.getComponentId(page.domID, item.id) + '"></div>';
                                        comTemplate += '<div style="height: 30px;"></div>';
                                    });

                                    pageTemplates.push({
                                        view: "template",
                                        id: page.domID,
                                        template: comTemplate,
                                        minWidth: 700,
                                        autoheight: true,
                                        scroll: false
                                    });
                                }

                                if ($$("<%- domID() %>"))
                                    webix.ui({}, $$("<%- domID() %>")); // Clear UI content

                                webix.ui({
                                    view: "multiview",
                                    container: this.element.attr('id'),
                                    css: "ab-main-container",
                                    id: "<%- domID() %>",
                                    cells: pageTemplates
                                });

                            },


                            initWebix: function (pageId) {
                                var self = this,
                                    app,
                                    page = self.pages[pageId],
                                    rows = [];

                                    page.components.forEach(function (item) {
                                        self.renderComponent(page, item);
                                    });

                                },

                                renderComponent: function (page, item) {
                                var self = this,
                                    component = self.components[item.component],
                                    view = component.getView(),
                                    app;

                                if (page.application && typeof page.application === 'object')
                                    app = page.application;

                                if (component.setApp && app)
                                    component.setApp(app);

                                if (view && component.render && item.setting) {
                                    view = $.extend(true, {}, view);
                                    view.id = self.getComponentId(page.domID, item.id);
                                    view.container = view.id;
                                    view.autowidth = true;

                                    if (item.component === 'Menu') {
                                        item.setting.click = function (id, ev) {
                                            self.showPage(id);
                                        };
                                    }

                                    $('#' + view.id).html('');

                                    webix.ui(view);

                                    component.render(view.id, item.setting);
                                }
                            },


                            resize: function (height) {
                                var width = this.element.width();

                                if (width > 0)
                                    $$("<%- domID() %>").define('width', width);

                                $$("<%- domID() %>").adjust();
                            },
                            
                            
                            /**
                            * @param integer pageID
                            *      Optional page ID number. Default is to show
                            *      the root page.
                            */
                            showPage: function (pageID) {
                                if (typeof pageID == 'undefined') {
                                    pageID = this.rootPageID;
                                }
                                $$(this.pages[pageID].domID).show();
                                this.activePageID = pageID;

                                this.initWebix(this.activePageID);
                                this.initEvents(this.activePageID);

                                this.resize();

                            },
                            
                            
                            /**
                            * Returns a basic object containing the names of all
                            * the pages from this controller, indexed by their
                            * page ID number.
                            */
                            getPages: function() {
                                var result = {};
                                for (var id in this.pages) {
                                    result[id] = pages[id].name;
                                }
                            },

                            getComponentId: function(pageId, itemId) {
                                return pageId + '-component-' + itemId;
                            }

                        });

                    });
              });
        });
    });