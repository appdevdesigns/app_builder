/**
 * Controller generated by App Builder
 */

steal(
    // List your Controller's dependencies here:
    function() {
        System.import('appdev').then(function () {
            System.import('opstools/BuildApp').then(function () {
                steal.import('appdev/ad',
                    'appdev/control/control',

<% for(var i = 0; i < models.length; i++) {%>                    'opstools/<%= appName %>/models/<%= appName %>_<%= models[i] %>',
<% } %>

                    'opstools/BuildApp/models/ABObject',

                    'opstools/BuildApp/controllers/page_components/Menu',
                    'opstools/BuildApp/controllers/page_components/Grid',
                    'opstools/BuildApp/controllers/page_components/Form',
                    'opstools/BuildApp/controllers/page_components/View',

                    'opstools/BuildApp/controllers/utils/ModelCreator',
                    'opstools/BuildApp/controllers/utils/DataHelper'

                    ).then(function() {
                        // Namespacing conventions:
                        // AD.Control.extend('[application].[controller]', [{ static },] {instance} );
                        AD.Control.extend('opstools.<%- appName %>.<%- pageName %>', {

                            init: function(element, options) {
                                var self = this;
                                options = AD.defaults({
                                    resize_notification: 'opstools.<%- appName %>.<%- pageName %>.resize'
                                }, options);
                                this.options = options;

                                // Call parent init
                                this._super(element, options);

                                this.data = {};
                                this.dataSource = this.options.dataSource;
                                this.rootPageID = this.activePageID = <%- rootPageID %>;
                                this.pages = <%- JSON.stringify(pages) %>;
                                
                                for (var id in this.pages) {
                                    this.pages[id].domID = '<%- domID() %>' + id;
                                }

                                // Find application object
                                for (var key in this.pages) {
                                    if (typeof this.pages[key].application === 'object')
                                        this.data.app = this.pages[key].application;
                                }

                                this.initModels();
                                this.initControllers();
                                this.initComponents();
                                this.setObjectList();

                                webix.ready(function() {
                                    self.initDOM();
                                    self.showPage();
                                });

                                /*
                                AD.comm.hub.subscribe(this.options.resize_notification, function(message, data) {
                                    console.log(message, data);
                                    self.resize();
                                });
                                */
                                
                                AD.comm.hub.subscribe('opsportal.resize', function(message, data) {
                                    self.resize(data.height);
                                });
                            },

                            initModels: function() {
                                this.Model = {};
                                this.Model.ABObject = AD.Model.get('opstools.BuildApp.ABObject');

<% for(var i = 0; i < models.length; i++) {%>                                this.Model.<%= appName %>_<%= models[i] %> = AD.Model.get('opstools.<%= appName %>.<%= appName %>_<%= models[i] %>');
<% } %>
                            },

                            initControllers: function() {
                                this.controllers = {};

                                var ModelCreator = AD.Control.get('opstools.BuildApp.ModelCreator'),
                                    DataHelper = AD.Control.get('opstools.BuildApp.DataHelper'),

                                    Menu = AD.Control.get('opstools.BuildApp.Components.Menu'),
                                    Grid = AD.Control.get('opstools.BuildApp.Components.Grid'),
                                    Form = AD.Control.get('opstools.BuildApp.Components.Form'),
                                    View = AD.Control.get('opstools.BuildApp.Components.View');

                                this.controllers.ModelCreator = new ModelCreator(this.element);
                                this.controllers.ModelCreator.setApp(this.data.app);
                                this.controllers.DataHelper = new DataHelper(this.element);

                                this.controllers.Menu = new Menu(this.element, {});
                                this.controllers.Grid = new Grid(this.element, {});
                                this.controllers.Form = new Form(this.element, {});
                                this.controllers.View = new View(this.element, {});
                            },


                            initComponents: function () {
                                var self = this;
                                self.components = {};

                                self.components.Menu = self.controllers.Menu.getInstance();
                                self.components.Grid = self.controllers.Grid.getInstance();
                                self.components.Form = self.controllers.Form.getInstance();
                                self.components.View = self.controllers.View.getInstance();
                            },

                            setObjectList: function() {
                                var self = this;

                                self.Model.ABObject.findAll({ application: self.data.app.id })
                                    .then(function(result) {
                                        self.controllers.DataHelper.setObjectList(result.attr());
                                        self.components.Form.setObjectList(result.attr());
                                    });
                            },

                            initEvents: function (pageId) {
                                var self = this,
                                    event_aggregator = $(self),
                                    page = self.pages[pageId];

                                for (var key in self.components) {
                                    var comInstance = self.components[key];
                                    if (comInstance.registerEventAggregator)
                                        comInstance.registerEventAggregator(event_aggregator);
                                }

                                event_aggregator.on('renderComplete', function (sender, data) {
                                    $$("<%- domID() %>").adjust();
                                });

                                event_aggregator.on('view', function (sender, data) {
                                    switch (data.component_name) {
                                        case 'Grid':
                                            var com = self.getComponent(pageId, data.viewId);
                                            if (!com) break;

                                            // Go to view page
                                            if (com.setting.viewPage && com.setting.viewPage != self.activePageID) {
                                                self.showPage(com.setting.viewPage);
                                            }

                                            break;
                                    }
                                });

                                event_aggregator.on('edit', function (sender, data) {
                                    switch (data.component_name) {
                                        case 'Grid':
                                            var com = self.getComponent(pageId, data.viewId);
                                            if (!com) break;

                                            // Go to edit page
                                            if (com.setting.editPage && com.setting.editPage != self.activePageID) {
                                                self.showPage(com.setting.editPage);

                                                // Populate data to edit form
                                                var formViewId = self.getComponentId('<%- domID() %>' + com.setting.editPage, com.setting.editForm);
                                                self.components.Form.setReturnPage(formViewId, com.page);
                                            }

                                            break;
                                    }
                                });

                                event_aggregator.on('save', function (sender, data) {
                                    switch (data.component_name) {
                                        case 'Form':
                                            var com = self.getComponent(pageId, data.viewId);
                                            if (!com) break;

                                            // Redirect to return page
                                            if (data.returnPage && data.returnPage != self.activePageID) {
                                                self.showPage(data.returnPage);
                                            }

                                            break;
                                    }
                                });

                                event_aggregator.on('cancel', function (sender, data) {
                                    switch (data.component_name) {
                                        case 'Form':
                                            if (data.returnPage && data.returnPage != self.activePageID)
                                                self.showPage(data.returnPage);
                                            else {
                                                var curPage = self.pages[self.activePageID];

                                                $$(data.viewId).setValues({});
                                            }

                                            break;
                                    }
                                });

                            },


                            initDOM: function () {
                                var self = this,
                                    html = '',
                                    pageTemplates = [];

                                for (var id in this.pages) {
                                    var page = this.pages[id];

                                    var comTemplate = '';

                                    page.components.sort(function (a, b) { return a.weight - b.weight });
                                    page.components.forEach(function (item) {
                                        comTemplate += '<div id="' + self.getComponentId(page.domID, item.id) + '"></div>';
                                        comTemplate += '<div style="height: 30px;"></div>';
                                    });

                                    pageTemplates.push({
                                        view: "template",
                                        id: page.domID,
                                        template: comTemplate,
                                        minWidth: 700,
                                        autoheight: true,
                                        scroll: true
                                    });
                                }

                                if ($$("<%- domID() %>"))
                                    webix.ui({}, $$("<%- domID() %>")); // Clear UI content

                                webix.ui({
                                    view: "multiview",
                                    container: this.element.attr('id'),
                                    css: "ab-main-container ab-generated-page",
                                    id: "<%- domID() %>",
                                    cells: pageTemplates,
                                    on: {
                                        onViewChange: function(prevId, nextId) {
                                            self.resize();
                                        }
                                    }
                                });

                            },


                            initWebix: function (pageId) {
                                var self = this,
                                    app,
                                    page = self.pages[pageId],
                                    rows = [];

                                    page.components.forEach(function (item) {
                                        self.renderComponent(page, item);
                                    });

                            },

                            renderComponent: function (page, item) {
                                var self = this,
                                    component = self.components[item.component],
                                    view = component.getView(),
                                    viewId = self.getComponentId(page.domID, item.id),
                                    app;

                                if(component.isRendered(viewId)) return;

                                if (page.application && typeof page.application === 'object')
                                        app = page.application;
                                    else if (!isNaN(page.application)) {
                                        for(var key in self.pages) {
                                            var p = self.pages[key];

                                            if (typeof p.application === 'object' && p.application.id == page.application)
                                                app = p.application;
                                        }
                                    }

                                    if (component.setApp && app)
                                        component.setApp(app);

                                    if (view && component.render && item.setting) {
                                        view = $.extend(true, {}, view);
                                        view.id = viewId;
                                        view.container = view.id;
                                        view.autowidth = true;

                                        if (item.component === 'Menu') {
                                            item.setting.click = function (id, ev) {
                                                // Find form to set return page
                                                self.pages[id].components.forEach(function(c) {
                                                    if (c.component === 'Form' && c.setting.cancelVisible && c.setting.cancelVisible === 'show') {
                                                        var formViewId = self.getComponentId(self.pages[id].domID, c.id);
                                                        self.components.Form.setReturnPage(formViewId, self.activePageID);
                                                    }
                                                });
                                                
                                                self.showPage(id);
                                            };
                                        }

                                        $('#' + view.id).html('');

                                        webix.ui(view);

                                        var dataCollection, linkedDataCollection;
                                        async.series([
                                            // Get data collection
                                            function(next){
                                                if (item.setting.object) {
                                                    self.getDataCollection(item.setting.object)
                                                        .then(function(result) {
                                                            dataCollection = result;
                                                            next();
                                                        });
                                                }
                                                else {
                                                    next();
                                                }
                                            },
                                            // Get linked data collection
                                            function(next){
                                                if (item.setting.linkedTo) {
                                                    self.getDataCollection(item.setting.linkedTo)
                                                        .then(function(result) {
                                                            linkedDataCollection = result;
                                                            next();
                                                        });
                                                }
                                                else {
                                                    next();
                                                }
                                            },
                                            function (next) {
                                                component.render(view.id, item.id, item.setting, false, false, dataCollection, linkedDataCollection);
                                                next();
                                            }
                                        ]);

                                    }
                                },

                                getDataCollection: function (objectId) {
                                    var self = this,
                                        q = $.Deferred();

                                    if (!self.data.dataCollections) self.data.dataCollections = {};

                                    if (!self.data.dataCollections[objectId]) {
                                        async.waterfall([
                                            // Get object info
                                            function (next) {
                                                self.Model.ABObject.findOne({ id: objectId })
                                                    .fail(function (err) { next(err); })
                                                    .then(function (objInfo) {
                                                        next(null, objInfo);
                                                    });
                                            },
                                            // Get object model
                                            function (objInfo, next) {
                                                self.controllers.ModelCreator.getModel(objInfo.attr('name'))
                                                    .fail(function (err) { next(err); })
                                                    .then(function (objectModel) {

                                                        next(null, objInfo, objectModel);
                                                    });
                                            },
                                            // Find data
                                            function (objInfo, objModel, next) {
                                                // Get link columns
                                                var linkCols = objInfo.columns.filter(function (col) { return col.linkObject != null }),
                                                    linkColNames = linkCols.map(function (col) { return col.name; }).attr();

                                                // Get date & datetime columns
                                                var dateCols = objInfo.columns.filter(function (col) { return col.setting.editor === 'date' || col.setting.editor === 'datetime'; });

                                                objModel.findAll({})
                                                    .fail(function (err) { next(err); })
                                                    .then(function (data) {

                                                        // Populate labels & Convert string to Date object
                                                        self.controllers.DataHelper.normalizeData(data, linkCols, dateCols)
                                                        .then(function() {
                                                            if (!self.data.dataCollections[objectId])
                                                                self.data.dataCollections[objectId] = AD.op.WebixDataCollection(data);

                                                            next();
                                                        });

                                                    });
                                            }
                                        ], function (err) {
                                            if (err) {
                                                q.reject(err);
                                                return;
                                            }

                                            q.resolve(self.data.dataCollections[objectId]);
                                        });
                                    }
                                    else {
                                        q.resolve(self.data.dataCollections[objectId]);
                                    }

                                    return q;
                                },

                                resize: function (height) {
                                    var width = this.element.width();

                                    if (!width) {
                                        this.element.parents().each(function(index, elm) {
                                            if ($(elm).width() > width)
                                                width = $(elm).width();
                                        });
                                    }

                                    if (width > 0)
                                        $$("<%- domID() %>").define('width', width);

                                    if (height > 0)
                                        $$("<%- domID() %>").define('height', height);

                                    $$("<%- domID() %>").adjust();
                                },
                                
                                
                                /**
                                * @param integer pageID
                                *      Optional page ID number. Default is to show
                                *      the root page.
                                */
                                showPage: function (pageID) {
                                    if (typeof pageID == 'undefined') {
                                        pageID = this.rootPageID;
                                    }
                                    $$(this.pages[pageID].domID).show();
                                    this.activePageID = pageID;

                                    this.initWebix(this.activePageID);
                                    this.initEvents(this.activePageID);

                                    this.resize();

                                },
                                
                                
                                /**
                                * Returns a basic object containing the names of all
                                * the pages from this controller, indexed by their
                                * page ID number.
                                */
                                getPages: function() {
                                    var result = {};
                                    for (var id in this.pages) {
                                        result[id] = pages[id].name;
                                    }
                                },

                                getComponentId: function(pageId, itemId) {
                                    return pageId + '-component-' + itemId;
                                },

                                getComponent: function (pageId, viewId) {
                                    var self = this,
                                        page = self.pages[pageId];

                                    var coms = page.components.filter(function (com) {
                                        return viewId == self.getComponentId(page.domID, com.id);
                                    });

                                    if (coms && coms.length > 0)
                                        return coms[0];
                                    else
                                        return null;
                                }


                        });

                    });
              });
        });
    });